<?php

/**
 * Implements hook_install().
 */
function reserves_bookings_install() {

	if (!field_info_field(BOOKING.'_bookingtime')) {
		$field = array(
		    'cardinality' => 1,
		    'entity_types' => BOOKING,
		    'field_name' => BOOKING.'_bookingtime',
		    'locked' => 1,
		    'module' => 'date',
		    'settings' => array(
		      'cache_count' => 4,
		      'cache_enabled' => 0,
		      'granularity' => array(
		        'day' => 'day',
		        'hour' => 'hour',
		        'minute' => 'minute',
		        'month' => 'month',
		        'second' => 0,
		        'year' => 'year',
		      ),
		      'repeat' => 0,
		      'timezone_db' => 'UTC',
		      'todate' => 'required',
		      'tz_handling' => 'site',
		    ),
		    'type' => 'datetime',
		);
		field_create_field($field);
	}
	if (!field_info_instance(BOOKING, BOOKING.'_bookingtime', BOOKING)) {
		$instance = array(
			'bundle' => BOOKING,
		    'display' => array(
		      'default' => array(
		        'label' => 'above',
		        'module' => 'date',
		        'settings' => array(
		          'format_type' => 'long',
		          'fromto' => 'both',
		          'multiple_from' => '',
		          'multiple_number' => '',
		          'multiple_to' => '',
		          'show_remaining_days' => FALSE,
		          'show_repeat_rule' => 'show',
		        ),
		        'type' => 'date_default',
		        'weight' => 4,
		      ),
		    ),
		    'entity_type' => BOOKING,
		    'field_name' => BOOKING.'_bookingtime',
		    'label' => 'Dia',
		    'required' => 0,
		    'settings' => array(
		      'default_value' => 'now',
		      'default_value2' => 'same',
		      'default_value_code' => '',
		      'default_value_code2' => '',
		      'user_register_form' => FALSE,
		    ),
		    'widget' => array(
		      'active' => 1,
		      'module' => 'date',
		      'settings' => array(
		        'increment' => 15,
		        'input_format' => 'd/m/Y - H:i:s',
		        'input_format_custom' => '',
		        'label_position' => 'above',
		        'no_fieldset' => 0,
		        'repeat_collapsed' => 0,
		        'text_parts' => array(),
		        'year_range' => '0:+1',
		      ),
		      'type' => 'date_popup',
		      'weight' => 45,
		    ),
		);
		field_create_instance($instance);
	}
}

/**
 * Implements hook_schema().
 */
function reserves_bookings_schema() {

	$schema = array();
  
	$schema[BOOKING] = array(
		'description' => 'The base table for the booking',
		'fields' => array(
		  'bid' => array(
			'description' => 'Primary key for the booking',
			'type' => 'serial',
			'unsigned' => TRUE,
			'not null' => TRUE,
		    ),
			 'uid' => array(
		        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
		        'type' => 'int',
		        'not null' => TRUE,
		        'default' => 0,
			  ),
			 'sid' => array(
			 	'description' => 'The relation with the space entity',
			 	'type' => 'int',
			 	'not null' => TRUE,
			 	'default' => 0,
			 ),
			 'status' => array(
		        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
		        'type' => 'int',
		        'not null' => TRUE,
		        'default' => 1,
		      ),
			 'pax' => array(
			 	'description' => 'Num of slots reserved',
			 	'type' => 'int',
			 	'not null' => TRUE,
			 	'default' => '1',
			 ),
			 'created' => array(
		        'description' => 'The Unix timestamp of the entity creation time.',
		        'type' => 'int',
		        'not null' => TRUE,
		        'default' => 0,
		  	),
		  	'changed' => array(
		        'description' => 'The Unix timestamp when the node was most recently saved.',
		        'type' => 'int',
		        'not null' => TRUE,
		        'default' => 0,
		    ),
		),
		'foreign keys' => array(
		  'reserves_espai' => array(
		    'table' => 'reserves_espai',
		    'columns' => array('sid' => 'sid'),
		   ),
		),
		'primary key' => array('bid'),
	);
	return $schema;
}

/**
 * Implements hook_uninstall().
 */
function reserves_bookings_uninstall() {

	$fields_toremove = array('_bookingtime');
	foreach ($fields_toremove as $key => $field) {
		$instance = field_info_instance(BOOKING, BOOKING.$field, BOOKING);
		if ($instance) {
			field_delete_instance($instance, TRUE);
		}
	}

  field_attach_delete_bundle(BOOKING, BOOKING);
}